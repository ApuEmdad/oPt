Option Explicit

'------------------------------------------------------------
' Helper: sync src ? dst (or dst ? src) based on a two-column table
'------------------------------------------------------------
Sub SyncPair(ByVal Target As Range, _
             ws As Worksheet, _
             srcHeader As String, dstHeader As String, _
             lkSheet As Worksheet, fromHeader As String, toHeader As String)

    Dim srcCol As Long, dstCol As Long
    Dim fromCol As Long, toCol As Long
    Dim hit As Range, c As Range, lastRow As Long, m As Variant

    srcCol = GetColByHeader(ws, srcHeader)
    dstCol = GetColByHeader(ws, dstHeader)
    fromCol = GetColByHeader(lkSheet, fromHeader)
    toCol = GetColByHeader(lkSheet, toHeader)

    If srcCol = 0 Or dstCol = 0 Or fromCol = 0 Or toCol = 0 Then Exit Sub

    Set hit = Intersect(Target, ws.Columns(srcCol))
    If hit Is Nothing Then Exit Sub

    lastRow = lkSheet.Cells(lkSheet.Rows.Count, fromCol).End(xlUp).Row

    For Each c In hit
        If c.Row > 1 Then
            If Trim(c.Value) = "" Then
                ws.Cells(c.Row, dstCol).ClearContents
            Else
                m = Application.Match(c.Value, lkSheet.Range(lkSheet.Cells(2, fromCol), lkSheet.Cells(lastRow, fromCol)), 0)
                If IsError(m) Then
                    ws.Cells(c.Row, dstCol).ClearContents
                Else
                    ws.Cells(c.Row, dstCol).Value = lkSheet.Cells(m + 1, toCol).Value
                End If
            End If
        End If
    Next c
End Sub

'------------------------------------------------------------
' Helper: Validate column values with regex
'------------------------------------------------------------
Sub ValidateColumnWithRegex(ws As Worksheet, Target As Range, headerName As String, pattern As String, msg As String)
    Dim col As Long
    col = GetColByHeader(ws, headerName)
    If col = 0 Then Exit Sub

    Dim r As Range
    If Not Intersect(Target, ws.Columns(col)) Is Nothing Then
        Dim regEx As Object
        Set regEx = CreateObject("VBScript.RegExp")
        regEx.pattern = pattern
        regEx.IgnoreCase = False
        regEx.Global = False

        For Each r In Intersect(Target, ws.Columns(col))
            If r.Row > 1 Then
                If Trim(r.Value) <> "" Then
                    If Not regEx.Test(Trim(r.Value)) Then
                        MsgBox "Row " & r.Row & ": " & msg, vbExclamation, "Invalid Entry"
                        Application.EnableEvents = False
                        r.ClearContents
                        Application.EnableEvents = True
                    End If
                End If
            End If
        Next r
    End If
End Sub

'------------------------------------------------------------
' Helper: Set dynamic dropdown based on lookup
'------------------------------------------------------------
Sub SetDynamicDropdown(ws As Worksheet, Target As Range, _
    triggerCol As Long, targetCol As Long, _
    lookupSheet As Worksheet, lookupKeyColName As String, _
    lookupValColName1 As String, lookupValColName2 As String, _
    matchOnCol1 As Boolean)

    Dim r As Range, key$, list$, lastRow As Long, i As Long
    Dim keyColNum As Long, valColNum1 As Long, valColNum2 As Long
    If triggerCol = 0 Or targetCol = 0 Then Exit Sub

    ' Get actual column numbers for lookup columns based on header names
    keyColNum = GetColByHeader(lookupSheet, lookupKeyColName)
    valColNum1 = GetColByHeader(lookupSheet, lookupValColName1)
    valColNum2 = GetColByHeader(lookupSheet, lookupValColName2)

    If keyColNum = 0 Or valColNum1 = 0 Or valColNum2 = 0 Then Exit Sub

    If Not Intersect(Target, ws.Columns(triggerCol)) Is Nothing Then
        For Each r In Intersect(Target, ws.Columns(triggerCol))
            If r.Row > 1 Then
                key = Trim(r.Value)
                With ws.Cells(r.Row, targetCol)
                    .Validation.Delete
                    .ClearContents
                End With
                If key <> "" Then
                    lastRow = lookupSheet.Cells(lookupSheet.Rows.Count, keyColNum).End(xlUp).Row
                    list = ""
                    For i = 2 To lastRow
                        Dim kVal As String, v1 As String, v2 As String
                        kVal = Trim(lookupSheet.Cells(i, keyColNum).Value)
                        v1 = Trim(lookupSheet.Cells(i, valColNum1).Value)
                        v2 = Trim(lookupSheet.Cells(i, valColNum2).Value)

                        If matchOnCol1 Then
                            If StrComp(kVal, key, vbTextCompare) = 0 Then
                                list = list & v2 & ","
                            End If
                        Else
                            If StrComp(v2, key, vbTextCompare) = 0 Then
                                list = list & v1 & ","
                            End If
                        End If
                    Next i
                    If list <> "" Then
                        list = Left(list, Len(list) - 1)
                        With ws.Cells(r.Row, targetCol).Validation
                            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                                 Operator:=xlBetween, Formula1:=list
                            .InCellDropdown = True
                        End With
                    End If
                End If
            End If
        Next r
    End If
End Sub

'------------------------------------------------------------
' Helper: Set dropdown for Sector and Focal Point
'------------------------------------------------------------

Sub SetDropdownFromFilteredRange(ws As Worksheet, Target As Range, _
    triggerCol As Long, targetCol As Long, _
    lookupSheet As Worksheet, filterColName As String, resultColName As String, _
    helperSheetName As String, helperStartCell As String)

    Dim r As Range, key As String
    Dim filterCol As Long, resultCol As Long
    Dim lastRow As Long, i As Long
    Dim helperWS As Worksheet
    Dim outputRow As Long
    Dim helperStartRow As Long, helperStartCol As Long
    Dim baseRowOffset As Long, currentHelperStartRow As Long
    Dim maxItemsPerList As Long

    filterCol = GetColByHeader(lookupSheet, filterColName)
    resultCol = GetColByHeader(lookupSheet, resultColName)
    If filterCol = 0 Or resultCol = 0 Then Exit Sub

    On Error Resume Next
    Set helperWS = ThisWorkbook.Sheets(helperSheetName)
    On Error GoTo 0
    If helperWS Is Nothing Then
        MsgBox "Helper sheet '" & helperSheetName & "' not found.", vbCritical
        Exit Sub
    End If

    ' Parse helper start cell to row and col
    helperStartRow = helperWS.Range(helperStartCell).Row
    helperStartCol = helperWS.Range(helperStartCell).Column

    ' maxItemsPerList = 20  ' maximum expected filtered items per dropdown

    ' Dynamically compute maxItemsPerList from focal_point sheet
    Dim counts As Object
    Set counts = CreateObject("Scripting.Dictionary")
    
    lastRow = lookupSheet.Cells(lookupSheet.Rows.Count, filterCol).End(xlUp).Row
    For i = 2 To lastRow
        Dim sectorKey As Variant
        sectorKey = Trim(lookupSheet.Cells(i, filterCol).Value)
        If sectorKey <> "" Then
            If Not counts.exists(sectorKey) Then
                counts(sectorKey) = 1
            Else
                counts(sectorKey) = counts(sectorKey) + 1
            End If
        End If
    Next i
    
    maxItemsPerList = 1
    For Each sectorKey In counts.Keys
        If counts(sectorKey) > maxItemsPerList Then
            maxItemsPerList = counts(sectorKey)
        End If
    Next


    If Not Intersect(Target, ws.Columns(triggerCol)) Is Nothing Then
        For Each r In Intersect(Target, ws.Columns(triggerCol))
            If r.Row > 1 Then
                key = Trim(r.Value)

                ' Calculate unique helper start row for this data validation
                ' E.g. for row 2: helperStartRow + (2 - 2)*maxItemsPerList = helperStartRow
                ' for row 3: helperStartRow + (3 - 2)*maxItemsPerList, etc.
                baseRowOffset = (r.Row - 2) * maxItemsPerList
                currentHelperStartRow = helperStartRow + baseRowOffset

                ' Clear existing validation and content in target cell
                With ws.Cells(r.Row, targetCol)
                    .Validation.Delete
                    .ClearContents
                End With

                ' Clear previous helper range for this row
                helperWS.Range(helperWS.Cells(currentHelperStartRow, helperStartCol), _
                               helperWS.Cells(currentHelperStartRow + maxItemsPerList - 1, helperStartCol)).ClearContents

                If key <> "" Then
                    lastRow = lookupSheet.Cells(lookupSheet.Rows.Count, filterCol).End(xlUp).Row
                    outputRow = currentHelperStartRow

                    ' Write filtered names to helper sheet column
                    For i = 2 To lastRow
                        If StrComp(Trim(lookupSheet.Cells(i, filterCol).Value), key, vbTextCompare) = 0 Then
                            helperWS.Cells(outputRow, helperStartCol).Value = lookupSheet.Cells(i, resultCol).Value
                            outputRow = outputRow + 1
                        End If
                    Next i

                    If outputRow > currentHelperStartRow Then
                        ' Define the range of the list in helper sheet
                        Dim listRange As String
                        listRange = helperWS.Name & "!" & _
                                    helperWS.Range(helperWS.Cells(currentHelperStartRow, helperStartCol), _
                                                  helperWS.Cells(outputRow - 1, helperStartCol)).Address(False, False)

                        ' Add validation referring to helper list range
                        With ws.Cells(r.Row, targetCol).Validation
                            .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                                 Operator:=xlBetween, Formula1:="=" & listRange
                            .InCellDropdown = True
                        End With
                    End If
                End If
            End If
        Next r
    End If
End Sub



'------------------------------------------------------------
' Main worksheet event
'------------------------------------------------------------
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim ws As Worksheet:      Set ws = Me
    Dim wsCat As Worksheet:   Set wsCat = ThisWorkbook.Sheets("Categories")
    Dim wsAssist As Worksheet: Set wsAssist = ThisWorkbook.Sheets("Assistance Type")
    Dim wsFeedback As Worksheet: Set wsFeedback = ThisWorkbook.Sheets("Feedback")
    Dim wsBreach As Worksheet: Set wsBreach = ThisWorkbook.Sheets("Breaches")
    Dim wsNeg As Worksheet:   Set wsNeg = ThisWorkbook.Sheets("Negative")
    Dim wsSubCat As Worksheet:   Set wsSubCat = ThisWorkbook.Sheets("sub_categories")

    Dim wsGov As Worksheet:   Set wsGov = ThisWorkbook.Sheets("Governorates")
    Dim wsSetGaza As Worksheet:   Set wsSetGaza = ThisWorkbook.Sheets("settlements_gaza")
    Dim wsFocal As Worksheet: Set wsFocal = ThisWorkbook.Sheets("focal_point")

    Application.EnableEvents = False     'prevent recursion


    '-- two-way label ? name syncing ------------------------
    Call SyncPair(Target, ws, "select_categories", "categories", wsCat, "label", "name")
    Call SyncPair(Target, ws, "categories", "select_categories", wsCat, "name", "label")

    Call SyncPair(Target, ws, "select_assistance", "assistance_types", wsAssist, "label", "name")
    Call SyncPair(Target, ws, "assistance_types", "select_assistance", wsAssist, "name", "label")

    Call SyncPair(Target, ws, "select_feedback", "feedback", wsFeedback, "label", "name")
    Call SyncPair(Target, ws, "feedback", "select_feedback", wsFeedback, "name", "label")

    Call SyncPair(Target, ws, "select_breaches", "Breaches", wsBreach, "label", "name")
    Call SyncPair(Target, ws, "Breaches", "select_breaches", wsBreach, "name", "label")

    Call SyncPair(Target, ws, "select_negative", "Negative", wsNeg, "label", "name")
    Call SyncPair(Target, ws, "Negative", "select_negative", wsNeg, "name", "label")

    Call SyncPair(Target, ws, "select_sub_categories", "sub_categories", wsSubCat, "label", "name")
    Call SyncPair(Target, ws, "sub_categories", "select_sub_categories", wsSubCat, "name", "label")

    Call SyncPair(Target, ws, "Focal Point", "Focal_Point_Email", wsFocal, "Focal Point", "focal_point_email")

    '-- locate key columns once ----------------------------
    Dim colWhere&, colGov&, colSetGaza&, colSector&, colFocalPoint&
    colWhere = GetColByHeader(ws, "where")
    colGov = GetColByHeader(ws, "governorate")
    colSetGaza = GetColByHeader(ws, "settlement_gaza")
    colSector = GetColByHeader(ws, "Sector")
    colFocalPoint = GetColByHeader(ws, "Focal Point")

    '–––––––– Governorate dropdown driven by “where” ––––––
    Call SetDynamicDropdown(ws, Target, colWhere, colGov, wsGov, "location", "location", "name", True)

    ' Clear settlement_gaza as well when "where" changes
    If colWhere > 0 And colSetGaza > 0 Then
        Dim r As Range
        If Not Intersect(Target, ws.Columns(colWhere)) Is Nothing Then
            For Each r In Intersect(Target, ws.Columns(colWhere))
                If r.Row > 1 Then
                    With ws.Cells(r.Row, colSetGaza)
                        .Validation.Delete
                        .ClearContents
                    End With
                End If
            Next r
        End If
    End If

    '–––––––– Settlement dropdown driven by governorate ––––––
    Call SetDynamicDropdown(ws, Target, colGov, colSetGaza, wsSetGaza, "governorate_value", "Title", "governorate_value", False)

    '-- NEW: Set dropdown for Focal Point based on Sector
    Call SetDropdownFromFilteredRange(ws, Target, colSector, colFocalPoint, wsFocal, "Sector", "Focal Point", "Helper", "A1")


    '–––––––– Regex validate "What_is_your_ID" ––––––––
    Call ValidateColumnWithRegex(ws, Target, "What_is_your_ID", "^\d{9}$", "'What_is_your_ID' must be exactly 9 digits.")
    
    '–––––––– Regex validate "What_is_your_phone_number" ––––––––
    Call ValidateColumnWithRegex(ws, Target, "What_is_your_phone_number", "^\d{10}$", "'What_is_your_phone_number' must be exactly 10 digits.")

    Application.EnableEvents = True
End Sub