Option Explicit
'────────────────────────────────────────────────────────────
' Helper: return column number for a given header (row 1)
'────────────────────────────────────────────────────────────
Function GetColByHeader(ws As Worksheet, headerName As String) As Long
    Dim c As Range
    For Each c In ws.Rows(1).Cells
        If Trim(LCase(c.Value)) = LCase(headerName) Then
            GetColByHeader = c.Column
            Exit Function
        End If
    Next c
    GetColByHeader = 0                 'not found
End Function
'────────────────────────────────────────────────────────────
' Helper: sync src→dst (or dst→src) based on a two‑column table
'────────────────────────────────────────────────────────────
Sub SyncPair(ByVal Target As Range, _
             ws As Worksheet, _
             srcHeader As String, dstHeader As String, _
             lkSheet As Worksheet, fromCol As String, toCol As String)

    Dim srcCol As Long, dstCol As Long
    srcCol = GetColByHeader(ws, srcHeader)
    dstCol = GetColByHeader(ws, dstHeader)
    If srcCol = 0 Or dstCol = 0 Then Exit Sub
    
    Dim hit As Range, c As Range, lastRow As Long, m As Variant
    Set hit = Intersect(Target, ws.Columns(srcCol))
    If hit Is Nothing Then Exit Sub
    
    lastRow = lkSheet.Cells(lkSheet.Rows.Count, fromCol).End(xlUp).Row
    
    For Each c In hit
        If c.Row > 1 Then
            If Trim(c.Value) = "" Then
                ws.Cells(c.Row, dstCol).ClearContents
            Else
                m = Application.Match(c.Value, lkSheet.Range(fromCol & "2:" & fromCol & lastRow), 0)
                If IsError(m) Then
                    ws.Cells(c.Row, dstCol).ClearContents
                Else
                    ws.Cells(c.Row, dstCol).Value = lkSheet.Cells(m + 1, toCol).Value
                End If
            End If
        End If
    Next c
End Sub
'────────────────────────────────────────────────────────────
' Main worksheet event
'────────────────────────────────────────────────────────────
Private Sub Worksheet_Change(ByVal Target As Range)
    Dim ws As Worksheet:      Set ws = Me
    Dim wsCat As Worksheet:   Set wsCat   = ThisWorkbook.Sheets("Categories")
    Dim wsAssist As Worksheet:Set wsAssist= ThisWorkbook.Sheets("Assistance Type")
    Dim wsBreach As Worksheet:Set wsBreach= ThisWorkbook.Sheets("Breaches")
    Dim wsNeg As Worksheet:   Set wsNeg   = ThisWorkbook.Sheets("Negative")
    Dim wsGov As Worksheet:   Set wsGov   = ThisWorkbook.Sheets("Governorates")
    Dim wsSet As Worksheet:   Set wsSet   = ThisWorkbook.Sheets("settlements_gaza")

    Application.EnableEvents = False     'prevent recursion
    '── two‑way pairs ──────────────────────────────────────
    Call SyncPair(Target, ws, "select_categories", "categories",     wsCat,   "D", "C")
    Call SyncPair(Target, ws, "categories",        "select_categories", wsCat,"C","D")
    
    Call SyncPair(Target, ws, "select_assistance", "assistance_types", wsAssist,"D","C")
    Call SyncPair(Target, ws, "assistance_types",  "select_assistance", wsAssist,"C","D")
    
    Call SyncPair(Target, ws, "select_breaches",   "Breaches", wsBreach,"D","C")
    Call SyncPair(Target, ws, "Breaches",          "select_breaches", wsBreach,"C","D")
    
    Call SyncPair(Target, ws, "select_negative",   "Negative", wsNeg,"D","C")
    Call SyncPair(Target, ws, "Negative",          "select_negative", wsNeg,"C","D")
    
    '── locate key columns once ────────────────────────────
    Dim colWhere&, colGov&, colSetGaza&
    colWhere = GetColByHeader(ws, "where")             'AD
    colGov   = GetColByHeader(ws, "governorate")       'AE
    colSetGaza   = GetColByHeader(ws, "settlement_gaza")   'AF
    '–––––––– Governorate dropdown driven by “where” ––––––
    If colWhere > 0 And colGov > 0 Then
        Dim r As Range, loc$, list$, lastRow&, arr, i&
        If Not Intersect(Target, ws.Columns(colWhere)) Is Nothing Then
            For Each r In Intersect(Target, ws.Columns(colWhere))
                If r.Row > 1 Then
                    loc = LCase(Trim(r.Value))
                    With ws.Cells(r.Row, colGov)
                        .Validation.Delete
                        .ClearContents
                    End With
                    With ws.Cells(r.Row, colSetGaza)
                        .Validation.Delete
                        .ClearContents
                    End With
                    If loc <> "" Then
                        lastRow = wsGov.Cells(wsGov.Rows.Count, "D").End(xlUp).Row
                        arr = wsGov.Range("D2:E" & lastRow).Value     '2‑D array
                        list = ""
                        For i = 1 To UBound(arr, 1)
                            If LCase(Trim(arr(i, 1))) = loc Then
                                list = list & arr(i, 2) & ","
                            End If
                        Next i
                        If list <> "" Then
                            list = Left(list, Len(list) - 1)
                            With ws.Cells(r.Row, colGov).Validation
                                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                                     Operator:=xlBetween, Formula1:=list
                                .InCellDropdown = True
                            End With
                        End If
                    End If
                End If
            Next r
        End If
    End If
    '–––––––– Settlement dropdown driven by governorate ––––––
    If colGov > 0 And colSetGaza > 0 Then
        Dim g As Range, gov$, listSet$, arrSet, j&, lastRowSet&
        If Not Intersect(Target, ws.Columns(colGov)) Is Nothing Then
            For Each g In Intersect(Target, ws.Columns(colGov))
                If g.Row > 1 Then
                    gov = LCase(Trim(g.Value))
                    With ws.Cells(g.Row, colSetGaza)
                        .Validation.Delete
                        .ClearContents
                    End With
                    If gov <> "" Then
                        lastRowSet = wsSet.Cells(wsSet.Rows.Count, "C").End(xlUp).Row   'C = governorate_value
                        arrSet = wsSet.Range("B2:C" & lastRowSet).Value                 'B = Title
                        listSet = ""
                        For j = 1 To UBound(arrSet, 1)
                            If LCase(Trim(arrSet(j, 2))) = gov Then
                                listSet = listSet & arrSet(j, 1) & ","
                            End If
                        Next j
                        If listSet <> "" Then
                            listSet = Left(listSet, Len(listSet) - 1)
                            With ws.Cells(g.Row, colSetGaza).Validation
                                .Add Type:=xlValidateList, AlertStyle:=xlValidAlertStop, _
                                     Operator:=xlBetween, Formula1:=listSet
                                .InCellDropdown = True
                            End With
                        End If
                    End If
                End If
            Next g
        End If
    End If
    Application.EnableEvents = True
End Sub
